{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Todo","todo","index","completeTodo","removeTodo","className","style","textDecoration","isCompleted","text","onClick","TodoForm","addTodo","React","useState","value","setValue","onSubmit","e","preventDefault","type","onChange","target","App","todos","setTodos","newTodos","splice","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAGA,SAASA,EAAT,GAA0D,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WACzC,OACE,sBACEC,UAAU,OAEVC,MAAO,CAAEC,eAAgBN,EAAKO,YAAc,eAAiB,IAH/D,UAKGP,EAAKQ,KACN,gCACE,wBAAQC,QAAS,kBAAMP,EAAaD,IAApC,sBACA,wBAAQQ,QAAS,kBAAMN,EAAWF,IAAlC,qBAUR,SAASS,EAAT,GAAgC,IAAZC,EAAW,EAAXA,QAAW,EAEHC,IAAMC,SAAS,IAFZ,mBAEtBC,EAFsB,KAEfC,EAFe,KAa7B,OACE,sBAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACGJ,IACLH,EAAQG,GACRC,EAAS,MAIT,SACE,uBACEI,KAAK,OACLf,UAAU,QACVU,MAAOA,EACPM,SAAU,SAAAH,GAAC,OAAIF,EAASE,EAAEI,OAAOP,YAwD1BQ,MAlDf,WAAe,MAEaV,IAAMC,SAAS,CACvC,CACEL,KAAM,gCAEND,aAAa,KANJ,mBAENgB,EAFM,KAECC,EAFD,KAiBPtB,EAAe,SAAAD,GACnB,IAAMwB,EAAQ,YAAOF,GACrBE,EAASxB,GAAOM,aAAc,EAC9BiB,EAASC,IAGLtB,EAAa,SAAAF,GACjB,IAAMwB,EAAQ,YAAOF,GACrBE,EAASC,OAAOzB,EAAO,GACvBuB,EAASC,IAGX,OAIE,aAHA,CAGA,OAAKrB,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACGmB,EAAMI,KAAI,SAAC3B,EAAMC,GAAP,OACT,cAACF,EAAD,CAEEE,MAAOA,EACPD,KAAMA,EACNE,aAAcA,EACdC,WAAYA,GAJPF,MAOT,cAACS,EAAD,CAAUC,QAjCA,SAAAH,GAEd,IAAMiB,EAAQ,sBAAOF,GAAP,CAAc,CAAEf,UAC9BgB,EAASC,YClDEG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0fb2113e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nfunction Todo({ todo, index, completeTodo, removeTodo }) {\n  return (\n    <div\n      className=\"todo\"\n      // when the item is crossed\n      style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\n    >\n      {todo.text}\n      <div>\n        <button onClick={() => completeTodo(index)}>Complete</button> \n        <button onClick={() => removeTodo(index)}>x</button>\n      </div>\n    </div>\n  );\n}\n\n\n// start with an empty state for an input field\n// be able to update the form by setting the state\n// handle the submit\nfunction TodoForm({ addTodo }) {\n  // srtting the state \n  const [value, setValue] = React.useState(\"\");\n\n  // adding item to the list by pressing ENTER \n  // or add nothing if nothing is typed in the field\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"input\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n    </form>\n  );\n}\n\nfunction App() {\n  // totos - name of the state, setTodos - used to set the state.\n  const [todos, setTodos] = React.useState([\n    {\n      text: \"Add an item to your TODO List\",\n      // set that to false to begin with and, when prompted, it will change that to true\n      isCompleted: false\n    }\n  ]);\n\n  // grab existing list of items, add the new item and display the new list\n  const addTodo = text => {\n    // ... - copy the list so you are able to add the new item\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = true; \n    setTodos(newTodos);\n  };\n  // COMPONENT FOR DELETING ITEMS\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    // creating the list of items\n    // map() allows to create a new array by maooing over the todo items \n    // from state and displaying them by index\n    <div className=\"app\">\n      <div className=\"todo-list\"> \n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}