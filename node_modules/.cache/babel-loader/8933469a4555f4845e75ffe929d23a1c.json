{"ast":null,"code":"import _toConsumableArray from\"/home/yana/todo/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/yana/todo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React from\"react\";import\"./App.css\";function Todo(_ref){var todo=_ref.todo,index=_ref.index,completeTodo=_ref.completeTodo,removeTodo=_ref.removeTodo;return/*#__PURE__*/_jsxs(\"div\",{className:\"todo\"// when the item is crossed\n,style:{textDecoration:todo.isCompleted?\"line-through\":\"\"},children:[todo.text,/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return completeTodo(index);},children:\"Complete\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return removeTodo(index);},children:\"x\"})]})]});}// start with an empty state for an input field\n// be able to update the form by setting the state\n// handle the submit\nfunction TodoForm(_ref2){var addTodo=_ref2.addTodo;// srtting the state \nvar _React$useState=React.useState(\"\"),_React$useState2=_slicedToArray(_React$useState,2),value=_React$useState2[0],setValue=_React$useState2[1];// adding item to the list by pressing ENTER \n// or add nothing if nothing is typed in the field\nvar handleSubmit=function handleSubmit(e){e.preventDefault();if(!value)return;addTodo(value);setValue(\"\");};return/*#__PURE__*/_jsx(\"form\",{onSubmit:handleSubmit,children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"input\",value:value,onChange:function onChange(e){return setValue(e.target.value);}})});}function App(){// totos - name of the state, setTodos - used to set the state.\nvar _React$useState3=React.useState([{text:\"Add an item to your TODO List\",// set that to false to begin with and, when prompted, it will change that to true\nisCompleted:false}]),_React$useState4=_slicedToArray(_React$useState3,2),todos=_React$useState4[0],setTodos=_React$useState4[1];// grab existing list of items, add the new item and display the new list\nvar addTodo=function addTodo(text){// ... - copy the list so you are able to add the new item\nvar newTodos=[].concat(_toConsumableArray(todos),[{text:text}]);setTodos(newTodos);};var completeTodo=function completeTodo(index){var newTodos=_toConsumableArray(todos);newTodos[index].isCompleted=true;setTodos(newTodos);};// COMPONENT FOR DELETING ITEMS\nvar removeTodo=function removeTodo(index){var newTodos=_toConsumableArray(todos);newTodos.splice(index,1);setTodos(newTodos);};return/*#__PURE__*/ (// creating the list of items\n// map() allows to create a new array by maooing over the todo items \n// from state and displaying them by index\n_jsx(\"div\",{className:\"app\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"todo-list\",children:[todos.map(function(todo,index){return/*#__PURE__*/_jsx(Todo,{index:index,todo:todo,completeTodo:completeTodo,removeTodo:removeTodo},index);}),/*#__PURE__*/_jsx(TodoForm,{addTodo:addTodo})]})}));}export default App;","map":{"version":3,"sources":["/home/yana/todo/src/App.js"],"names":["React","Todo","todo","index","completeTodo","removeTodo","textDecoration","isCompleted","text","TodoForm","addTodo","useState","value","setValue","handleSubmit","e","preventDefault","target","App","todos","setTodos","newTodos","splice","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nfunction Todo({ todo, index, completeTodo, removeTodo }) {\n  return (\n    <div\n      className=\"todo\"\n      // when the item is crossed\n      style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\n    >\n      {todo.text}\n      <div>\n        <button onClick={() => completeTodo(index)}>Complete</button> \n        <button onClick={() => removeTodo(index)}>x</button>\n      </div>\n    </div>\n  );\n}\n\n\n// start with an empty state for an input field\n// be able to update the form by setting the state\n// handle the submit\nfunction TodoForm({ addTodo }) {\n  // srtting the state \n  const [value, setValue] = React.useState(\"\");\n\n  // adding item to the list by pressing ENTER \n  // or add nothing if nothing is typed in the field\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"input\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n    </form>\n  );\n}\n\nfunction App() {\n  // totos - name of the state, setTodos - used to set the state.\n  const [todos, setTodos] = React.useState([\n    {\n      text: \"Add an item to your TODO List\",\n      // set that to false to begin with and, when prompted, it will change that to true\n      isCompleted: false\n    }\n  ]);\n\n  // grab existing list of items, add the new item and display the new list\n  const addTodo = text => {\n    // ... - copy the list so you are able to add the new item\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = true; \n    setTodos(newTodos);\n  };\n  // COMPONENT FOR DELETING ITEMS\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    // creating the list of items\n    // map() allows to create a new array by maooing over the todo items \n    // from state and displaying them by index\n    <div className=\"app\">\n      <div className=\"todo-list\"> \n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}