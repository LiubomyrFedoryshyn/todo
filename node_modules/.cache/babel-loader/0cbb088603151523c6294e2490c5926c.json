{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/yana/todolist/todo/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./App.css\";\n\nfunction Todo({\n  todo,\n  index,\n  completeTodo,\n  removeTodo\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo\" // when the item is crossed\n    ,\n    style: {\n      textDecoration: todo.isCompleted ? \"line-through\" : \"\"\n    },\n    children: [todo.text, /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => completeTodo(index),\n        children: \"Complete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => removeTodo(index),\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n} // start with an empty state for an input field\n// be able to update the form by setting the state\n// handle the submit\n\n\n_c = Todo;\n\nfunction TodoForm({\n  addTodo\n}) {\n  _s();\n\n  // srtting the state \n  const [value, setValue] = React.useState(\"\"); // adding item to the list by pressing ENTER \n  // or add nothing if nothing is typed in the field\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"input\",\n      value: value,\n      onChange: e => setValue(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TodoForm, \"dBtK6I2q1m3rcfzPBa0nrbv/iCI=\");\n\n_c2 = TodoForm;\n\nfunction App() {\n  _s2();\n\n  // totos - name of the state, setTodos - used to set the state.\n  const [todos, setTodos] = React.useState([{\n    text: \"Learn about React\",\n    // set that to false to begin with and, when prompted, it will change that to true\n    isCompleted: false\n  }, {\n    text: \"Meet friend for lunch\",\n    isCompleted: false\n  }, {\n    text: \"Build really cool todo app\",\n    isCompleted: false\n  }]); // grab existing list of items, add the new item and display the new list\n\n  const addTodo = text => {\n    // ... - copy the list so you are able to add the new item\n    const newTodos = [...todos, {\n      text\n    }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = true;\n    setTodos(newTodos);\n  }; // COMPONENT FOR DELETING ITEMS\n\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    /*#__PURE__*/\n    // creating the list of items\n    // map() allows to create a new array by maooing over the todo items \n    // from state and displaying them by index\n    _jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todo-list\",\n        children: [todos.map((todo, index) => /*#__PURE__*/_jsxDEV(Todo, {\n          index: index,\n          todo: todo,\n          completeTodo: completeTodo,\n          removeTodo: removeTodo\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)), /*#__PURE__*/_jsxDEV(TodoForm, {\n          addTodo: addTodo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s2(App, \"hN6mq7gIVWBQa2vg+xIuvFUpwaA=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Todo\");\n$RefreshReg$(_c2, \"TodoForm\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/home/yana/todolist/todo/src/App.js"],"names":["React","Todo","todo","index","completeTodo","removeTodo","textDecoration","isCompleted","text","TodoForm","addTodo","value","setValue","useState","handleSubmit","e","preventDefault","target","App","todos","setTodos","newTodos","splice","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nfunction Todo({ todo, index, completeTodo, removeTodo }) {\n  return (\n    <div\n      className=\"todo\"\n      // when the item is crossed\n      style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\n    >\n      {todo.text}\n      <div>\n        <button onClick={() => completeTodo(index)}>Complete</button> \n        <button onClick={() => removeTodo(index)}>x</button>\n      </div>\n    </div>\n  );\n}\n\n\n// start with an empty state for an input field\n// be able to update the form by setting the state\n// handle the submit\nfunction TodoForm({ addTodo }) {\n  // srtting the state \n  const [value, setValue] = React.useState(\"\");\n\n  // adding item to the list by pressing ENTER \n  // or add nothing if nothing is typed in the field\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"input\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n    </form>\n  );\n}\n\nfunction App() {\n  // totos - name of the state, setTodos - used to set the state.\n  const [todos, setTodos] = React.useState([\n    {\n      text: \"Learn about React\",\n      // set that to false to begin with and, when prompted, it will change that to true\n      isCompleted: false\n    },\n    {\n      text: \"Meet friend for lunch\",\n      isCompleted: false\n    },\n    {\n      text: \"Build really cool todo app\",\n      isCompleted: false\n    }\n  ]);\n\n  // grab existing list of items, add the new item and display the new list\n  const addTodo = text => {\n    // ... - copy the list so you are able to add the new item\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = true; \n    setTodos(newTodos);\n  };\n  // COMPONENT FOR DELETING ITEMS\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    // creating the list of items\n    // map() allows to create a new array by maooing over the todo items \n    // from state and displaying them by index\n    <div className=\"app\">\n      <div className=\"todo-list\"> \n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}